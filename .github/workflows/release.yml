name: create release

on:
  push:
    tags:
      # This workflow runs when a tag is pushed that matches the vX.Y.Z format.
      # For example: v1.2.3 or 1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    name: Build Application
    runs-on: ${{ matrix.os }}
    strategy:
      # This matrix builds the application for different OS and architecture combinations.
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
          - goos: linux
            goarch: arm64
            os: ubuntu-latest
          - goos: windows
            goarch: amd64
            os: windows-latest
            ext: .exe
          - goos: darwin # macOS
            goarch: amd64
            os: macos-latest
          - goos: darwin # macOS
            goarch: arm64
            os: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'src/go.mod'

      - name: Build executable
        working-directory: ./src
        run: |
          go build -v -o ../release/idiot-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} -ldflags="-s -w" .
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Create a unique artifact name for each build matrix combination
          name: idiot-binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: release/idiot-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully.
    permissions:
      contents: write # This permission is required to create a release.

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Downloads all artifacts from the workflow run into a single directory.
          path: release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release-artifacts/**/*" # Upload all downloaded files as release assets
          generateReleaseNotes: true # Automatically generate release notes from commits
          token: ${{ secrets.GITHUB_TOKEN }}

